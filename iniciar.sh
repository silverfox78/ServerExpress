#!/bin/bash
V_PROYECTO="NODE EXPRESS CON TYPESCRIPT"
V_REPOGIT="https://github.com/silverfox78/ServerExpress.git"

echo -e "# $V_PROYECTO\n" > README.MD
echo -e "## Paso I.- Modificar archivo **package.json**\n" >> README.MD
echo -e "\`\`\` json" >> README.MD
echo "    \"main\": \"dist/main.js\"," >> README.MD
echo "    \"scripts\": {" >> README.MD
echo "        \"start\": \"rm -rf dist/ && tsc && node dist/main.js\"," >> README.MD
echo "        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"" >> README.MD
echo "    }," >> README.MD
echo -e "\`\`\`\n" >> README.MD

echo -e "## Paso II.- Modificar archivo **tsconfig.json**\n" >> README.MD
echo -e "\`\`\` json" >> README.MD
echo "{" >> README.MD
echo "    \"compilerOptions\": {" >> README.MD
echo "        \"target\": \"ES2020\"," >> README.MD
echo "        \"module\": \"commonjs\"," >> README.MD
echo "        \"outDir\": \"dist\"," >> README.MD
echo "        \"strict\": true," >> README.MD
echo "        \"esModuleInterop\": true," >> README.MD
echo "        \"skipLibCheck\": true," >> README.MD
echo "        \"forceConsistentCasingInFileNames\": true" >> README.MD
echo "    }," >> README.MD
echo "    \"files\": [" >> README.MD
echo "        \"./src/main.ts\"" >> README.MD
echo "    ]" >> README.MD
echo "}" >> README.MD
echo -e "\`\`\`\n" >> README.MD


echo -e "## Paso III.- Para ejecutar el proyecto, desde la consola escribir\n" >> README.MD
echo -e "\`\`\` bash" >> README.MD
echo "    npm start" >> README.MD
echo -e "\`\`\`" >> README.MD

npm init -y
npm i -D typescript
npx typescript --init
npm i -D eslint
npm i -D prettier
npm i -S @types/lodash
npm i --save-dev @types/node
npm i --save-dev @tsconfig/node14
npm i express --save
npm i ts-node --save
npm i --S body-parser
npm i --save-dev @types/node @types/express
npm i ejs
npm i --save-dev ts-node shelljs fs-extra nodemon rimraf npm-run-all
npm i --save-dev @types/fs-extra @types/shelljs
npm i dotenv
npm i --save-dev @types/dotenv

echo "# Informacion del Ambiente" > .env
echo "NODE_ENV=development" >> .env
echo "" >> .env
echo "# Puerto para el servicio con Express" >> .env
echo "SERVER_PORT=8080" >> .env


echo "# Logs" > .gitignore
echo "logs" >> .gitignore
echo "*.log" >> .gitignore
echo "npm-debug.log*" >> .gitignore
echo "yarn-debug.log*" >> .gitignore
echo "yarn-error.log*" >> .gitignore
echo "lerna-debug.log*" >> .gitignore
echo "" >> .gitignore
echo "# Diagnostic reports (https://nodejs.org/api/report.html)" >> .gitignore
echo "report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json" >> .gitignore
echo "" >> .gitignore
echo "# Runtime data" >> .gitignore
echo "pids" >> .gitignore
echo "*.pid" >> .gitignore
echo "*.seed" >> .gitignore
echo "*.pid.lock" >> .gitignore
echo "" >> .gitignore
echo "# Directory for instrumented libs generated by jscoverage/JSCover" >> .gitignore
echo "lib-cov" >> .gitignore
echo "" >> .gitignore
echo "# Coverage directory used by tools like istanbul" >> .gitignore
echo "coverage" >> .gitignore
echo "*.lcov" >> .gitignore
echo "" >> .gitignore
echo "# nyc test coverage" >> .gitignore
echo ".nyc_output" >> .gitignore
echo "" >> .gitignore
echo "# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)" >> .gitignore
echo ".grunt" >> .gitignore
echo "" >> .gitignore
echo "# Bower dependency directory (https://bower.io/)" >> .gitignore
echo "bower_components" >> .gitignore
echo "" >> .gitignore
echo "# node-waf configuration" >> .gitignore
echo ".lock-wscript" >> .gitignore
echo "" >> .gitignore
echo "# Compiled binary addons (https://nodejs.org/api/addons.html)" >> .gitignore
echo "build/Release" >> .gitignore
echo "" >> .gitignore
echo "# Dependency directories" >> .gitignore
echo "node_modules/" >> .gitignore
echo "jspm_packages/" >> .gitignore
echo "" >> .gitignore
echo "# Snowpack dependency directory (https://snowpack.dev/)" >> .gitignore
echo "web_modules/" >> .gitignore
echo "" >> .gitignore
echo "# TypeScript cache" >> .gitignore
echo "*.tsbuildinfo" >> .gitignore
echo "" >> .gitignore
echo "# Optional npm cache directory" >> .gitignore
echo ".npm" >> .gitignore
echo "" >> .gitignore
echo "# Optional eslint cache" >> .gitignore
echo ".eslintcache" >> .gitignore
echo "" >> .gitignore
echo "# Microbundle cache" >> .gitignore
echo ".rpt2_cache/" >> .gitignore
echo ".rts2_cache_cjs/" >> .gitignore
echo ".rts2_cache_es/" >> .gitignore
echo ".rts2_cache_umd/" >> .gitignore
echo "" >> .gitignore
echo "# Optional REPL history" >> .gitignore
echo ".node_repl_history" >> .gitignore
echo "" >> .gitignore
echo "# Output of 'npm pack'" >> .gitignore
echo "*.tgz" >> .gitignore
echo "" >> .gitignore
echo "# Yarn Integrity file" >> .gitignore
echo ".yarn-integrity" >> .gitignore
echo "" >> .gitignore
echo "# dotenv environment variables file" >> .gitignore
echo ".env" >> .gitignore
echo ".env.test" >> .gitignore
echo "" >> .gitignore
echo "# parcel-bundler cache (https://parceljs.org/)" >> .gitignore
echo ".cache" >> .gitignore
echo ".parcel-cache" >> .gitignore
echo "" >> .gitignore
echo "# Next.js build output" >> .gitignore
echo ".next" >> .gitignore
echo "out" >> .gitignore
echo "" >> .gitignore
echo "# Nuxt.js build / generate output" >> .gitignore
echo ".nuxt" >> .gitignore
echo "dist" >> .gitignore
echo "" >> .gitignore
echo "# Gatsby files" >> .gitignore
echo ".cache/" >> .gitignore
echo "# Comment in the public line in if your project uses Gatsby and not Next.js" >> .gitignore
echo "# https://nextjs.org/blog/next-9-1#public-directory-support" >> .gitignore
echo "# public" >> .gitignore
echo "" >> .gitignore
echo "# vuepress build output" >> .gitignore
echo ".vuepress/dist" >> .gitignore
echo "" >> .gitignore
echo "# Serverless directories" >> .gitignore
echo ".serverless/" >> .gitignore
echo "" >> .gitignore
echo "# FuseBox cache" >> .gitignore
echo ".fusebox/" >> .gitignore
echo "" >> .gitignore
echo "# DynamoDB Local files" >> .gitignore
echo ".dynamodb/" >> .gitignore
echo "" >> .gitignore
echo "# TernJS port file" >> .gitignore
echo ".tern-port" >> .gitignore
echo "" >> .gitignore
echo "# Stores VSCode versions used for testing VSCode extensions" >> .gitignore
echo ".vscode-test" >> .gitignore
echo "" >> .gitignore
echo "# yarn v2" >> .gitignore
echo ".yarn/cache" >> .gitignore
echo ".yarn/unplugged" >> .gitignore
echo ".yarn/build-state.yml" >> .gitignore
echo ".yarn/install-state.gz" >> .gitignore
echo ".pnp.*" >> .gitignore
echo "dist/" >> .gitignore


mkdir "src"
cd src
echo -e "import dotenv from \"dotenv\";" > main.ts
echo -e "import express from \"express\";" >> main.ts
echo -e "import path from \"path\";" >> main.ts
echo -e "import * as shell from \"shelljs\";" >> main.ts
echo -e "" >> main.ts
echo -e "console.log('Se inica proyecto: $V_PROYECTO');" >> main.ts
echo -e "" >> main.ts
echo -e "dotenv.config();" >> main.ts
echo -e "" >> main.ts
echo -e "const app = express();" >> main.ts
echo -e "const port = process.env.SERVER_PORT;" >> main.ts
echo -e "" >> main.ts
echo -e "shell.cp( \"-R\", \"src/views\", \"dist/\" );" >> main.ts
echo -e "" >> main.ts
echo -e "app.set( \"views\", path.join( __dirname, \"views\" ) );" >> main.ts
echo -e "app.set( \"view engine\", \"ejs\" );" >> main.ts
echo -e "" >> main.ts
echo -e "app.get( \"/\", ( req, res ) => {" >> main.ts
echo -e "    res.render( \"index\" );" >> main.ts
echo -e "} );" >> main.ts
echo -e "" >> main.ts
echo -e "app.listen( port, () => {" >> main.ts
echo -e "    console.log( `Se inicia server en la ruta: http://localhost:${ port }` );" >> main.ts
echo -e "} );" >> main.ts


mkdir "views"
cd views
echo -e "<!doctype html>" > index.ejs
echo -e "<html lang=\"en\">" >> index.ejs
echo -e "" >> index.ejs
echo -e "<head>" >> index.ejs
echo -e "    <title>$V_PROYECTO</title>" >> index.ejs
echo -e "    <!-- Required meta tags -->" >> index.ejs
echo -e "    <meta charset=\"utf-8\">" >> index.ejs
echo -e "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">" >> index.ejs
echo -e "" >> index.ejs
echo -e "    <!-- Bootstrap CSS -->" >> index.ejs
echo -e "    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"" >> index.ejs
echo -e "        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">" >> index.ejs
echo -e "</head>" >> index.ejs
echo -e "" >> index.ejs
echo -e "<body>" >> index.ejs
echo -e "    <div class=\"container\">" >> index.ejs
echo -e "        <div class=\"jumbotron\">" >> index.ejs
echo -e "            <h1 class=\"display-4\">$V_PROYECTO</h1>" >> index.ejs
echo -e "            <p class=\"lead\">Pagina principal.</p>" >> index.ejs
echo -e "        </div>" >> index.ejs
echo -e "    </div>" >> index.ejs
echo -e "    <!-- Optional JavaScript -->" >> index.ejs
echo -e "    <!-- jQuery first, then Popper.js, then Bootstrap JS -->" >> index.ejs
echo -e "    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"" >> index.ejs
echo -e "        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"" >> index.ejs
echo -e "        crossorigin=\"anonymous\"></script>" >> index.ejs
echo -e "    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"" >> index.ejs
echo -e "        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"" >> index.ejs
echo -e "        crossorigin=\"anonymous\"></script>" >> index.ejs
echo -e "    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"" >> index.ejs
echo -e "        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"" >> index.ejs
echo -e "        crossorigin=\"anonymous\"></script>" >> index.ejs
echo -e "</body>" >> index.ejs
echo -e "" >> index.ejs
echo -e "</html>" >> index.ejs

cd ..
cd ..

echo -e "MIT License" > LICENSE
echo -e "" >> LICENSE
echo -e "Copyright (c) 2021 Samuel Barrera Bastidas" >> LICENSE
echo -e "" >> LICENSE
echo -e "Permission is hereby granted, free of charge, to any person obtaining a copy" >> LICENSE
echo -e "of this software and associated documentation files (the "Software"), to deal" >> LICENSE
echo -e "in the Software without restriction, including without limitation the rights" >> LICENSE
echo -e "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" >> LICENSE
echo -e "copies of the Software, and to permit persons to whom the Software is" >> LICENSE
echo -e "furnished to do so, subject to the following conditions:" >> LICENSE
echo -e "" >> LICENSE
echo -e "The above copyright notice and this permission notice shall be included in all" >> LICENSE
echo -e "copies or substantial portions of the Software." >> LICENSE
echo -e "" >> LICENSE
echo -e "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" >> LICENSE
echo -e "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," >> LICENSE
echo -e "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" >> LICENSE
echo -e "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" >> LICENSE
echo -e "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," >> LICENSE
echo -e "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" >> LICENSE
echo -e "SOFTWARE." >> LICENSE

git init --initial-branch=main
git checkout -b main
git add .
git commit -m "Se inicializa el repositorio"
git remote add origin $V_REPOGIT
git push -u origin main